╔══════════════════════════════════════════════════════════════════════════════╗
║                    GUI_APP.PY DEPENDENCY MAP                                 ║
║                    EEG Biometric Authentication System                       ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                          🎯 MAIN APPLICATION                                 │
│                                                                              │
│                            gui_app.py                                        │
│                     (PyQt5 GUI Application)                                  │
│                                                                              │
│  Features:                                                                   │
│  • User Registration & De-registration                                       │
│  • Model Training                                                            │
│  • Authentication                                                            │
│  • Hamburger Menu (Advanced Tools)                                           │
│  • Dashboard Access                                                          │
│  • Theme Toggle (Dark/Light)                                                 │
│  • Keyboard Shortcuts                                                        │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                    ┌───────────────┼───────────────┐
                    │               │               │
                    ▼               ▼               ▼
        ┌──────────────┐  ┌──────────────┐  ┌──────────────┐
        │  themes.py   │  │main_window.ui│  │  config.py   │
        │              │  │              │  │              │
        │ • DARK_THEME │  │ • UI Layout  │  │ • CHANNELS   │
        │ • LIGHT_THEME│  │ • Widgets    │  │ • WINDOW_SIZE│
        │              │  │ • Styling    │  │ • PATHS      │
        └──────────────┘  └──────────────┘  └──────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                        🔧 CORE BACKEND LAYER                                 │
└─────────────────────────────────────────────────────────────────────────────┘

                            backend.py
                    (Authentication & User Management)
                                │
                ┌───────────────┼───────────────┐
                │               │               │
                ▼               ▼               ▼
    ┌──────────────────┐  ┌──────────────┐  ┌──────────────┐
    │ eeg_processing.py│  │model_mgmt.py │  │ database.py  │
    │                  │  │              │  │              │
    │ • get_subject_   │  │ • EEG_CNN_   │  │ • add_user() │
    │   files()        │  │   Improved   │  │ • remove_    │
    │ • load_and_      │  │ • load_      │  │   user()     │
    │   segment_csv()  │  │   production_│  │ • get_users()│
    │ • validate_eeg_  │  │   model()    │  │ • log_auth() │
    │   data()         │  │              │  │              │
    └──────────────────┘  └──────────────┘  └──────────────┘
            │                     │                  │
            │                     │                  │
            ▼                     ▼                  ▼
    ┌──────────────┐      ┌──────────────┐  ┌──────────────┐
    │  config.py   │      │   PyTorch    │  │  SQLite DB   │
    │              │      │              │  │              │
    │ • CHANNELS   │      │ • torch.nn   │  │ • users      │
    │ • WINDOW_SIZE│      │ • Conv1d     │  │ • auth_logs  │
    │ • STEP_SIZE  │      │ • BatchNorm  │  │ • settings   │
    └──────────────┘      └──────────────┘  └──────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                    🎨 OPTIONAL ENHANCEMENT MODULES                           │
│                    (Accessed via Hamburger Menu)                             │
└─────────────────────────────────────────────────────────────────────────────┘

        gui_app.py (Hamburger Menu ☰)
                    │
        ┌───────────┼───────────┬───────────┬───────────┐
        │           │           │           │           │
        ▼           ▼           ▼           ▼           ▼
┌──────────┐ ┌──────────┐ ┌──────────┐ ┌──────────┐ ┌──────────┐
│dashboard │ │ signal_  │ │frequency_│ │performance│ │  model_  │
│   .py    │ │ viewer.py│ │analyzer  │ │_analyzer │ │comparison│
│          │ │          │ │   .py    │ │   .py    │ │   .py    │
│ 📊 Stats │ │ 📈 Plot  │ │ 🌊 FFT   │ │ 📉 ROC   │ │ 🔬 Compare│
│ • System │ │ • EEG    │ │ • PSD    │ │ • Metrics│ │ • CNN    │
│   Stats  │ │   Signals│ │ • Bands  │ │ • Conf   │ │ • MLP    │
│ • User   │ │ • Multi  │ │ • Spectro│ │   Matrix │ │ • RF     │
│   Analytics│ │   Channel│ │   gram   │ │          │ │ • SVM    │
│ • Export │ │          │ │          │ │          │ │          │
└──────────┘ └──────────┘ └──────────┘ └──────────┘ └──────────┘
     │            │            │            │            │
     └────────────┴────────────┴────────────┴────────────┘
                              │
                              ▼
                    ┌──────────────────┐
                    │   matplotlib     │
                    │   seaborn        │
                    │   scipy          │
                    └──────────────────┘

                    ┌──────────────┐
                    │ settings.py  │
                    │              │
                    │ ⚙️ Configure │
                    │ • Thresholds │
                    │ • Epochs     │
                    │ • Batch Size │
                    └──────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                        💾 DATA & ASSETS FLOW                                 │
└─────────────────────────────────────────────────────────────────────────────┘

    data/Filtered_Data/              assets/
    ├── s01_ex01_s01.csv    ──────▶  ├── model.pth
    ├── s01_ex02_s01.csv             ├── label_encoder.joblib
    ├── s02_ex01_s01.csv             ├── scaler.joblib
    └── ...                          ├── users.json
                                     └── data_<username>.npy
         │                                    │
         │ (Registration)                    │ (Authentication)
         ▼                                    ▼
    backend.register_user()          backend.authenticate()
         │                                    │
         ▼                                    ▼
    eeg_processing.py                model_management.py
    • load_and_segment_csv()         • load_production_model()
    • get_subject_files()            • EEG_CNN_Improved
         │                                    │
         ▼                                    ▼
    Save to assets/                  Predict & Return Result
    data_<username>.npy


┌─────────────────────────────────────────────────────────────────────────────┐
│                        📦 EXTERNAL DEPENDENCIES                              │
└─────────────────────────────────────────────────────────────────────────────┘

    requirements.txt
    ├── PyQt5 ≥ 5.15.0          ──▶  GUI Framework
    ├── torch ≥ 1.9.0           ──▶  Deep Learning
    ├── pandas ≥ 1.3.0          ──▶  Data Processing
    ├── numpy ≥ 1.21.0          ──▶  Numerical Computing
    ├── scikit-learn ≥ 1.0.0    ──▶  ML Utilities
    ├── joblib ≥ 1.0.0          ──▶  Model Serialization
    ├── matplotlib ≥ 3.5.0      ──▶  Plotting
    ├── seaborn ≥ 0.11.0        ──▶  Statistical Plots
    ├── scipy ≥ 1.7.0           ──▶  Signal Processing
    └── reportlab ≥ 3.6.0       ──▶  PDF Reports


┌─────────────────────────────────────────────────────────────────────────────┐
│                        🔄 EXECUTION FLOW                                     │
└─────────────────────────────────────────────────────────────────────────────┘

    1. USER REGISTRATION
    ────────────────────
    gui_app.py (Register Button)
         │
         ▼
    backend.register_user(username, subject_id)
         │
         ├──▶ eeg_processing.get_subject_files()
         │         │
         │         ▼
         │    Load CSV files from data/Filtered_Data/
         │
         ├──▶ eeg_processing.load_and_segment_csv()
         │         │
         │         ▼
         │    Segment into 256-sample windows
         │
         ├──▶ Save to assets/data_<username>.npy
         │
         └──▶ database.add_user()
               │
               ▼
         Update users.json & eeg_system.db


    2. MODEL TRAINING
    ─────────────────
    gui_app.py (Train Button)
         │
         ▼
    backend.train_model()
         │
         ├──▶ Load all user data from assets/
         │
         ├──▶ StandardScaler.fit_transform()
         │
         ├──▶ LabelEncoder.fit_transform()
         │
         ├──▶ Train/Val Split (80/20)
         │
         ├──▶ model_management.EEG_CNN_Improved()
         │         │
         │         ▼
         │    Train for 50 epochs (early stopping)
         │
         ├──▶ Save model.pth
         ├──▶ Save label_encoder.joblib
         └──▶ Save scaler.joblib


    3. AUTHENTICATION
    ─────────────────
    gui_app.py (Authenticate Button)
         │
         ▼
    backend.authenticate_with_subject_id()
         │
         ├──▶ Validate user exists
         ├──▶ Validate Subject ID
         │
         ▼
    backend.authenticate()
         │
         ├──▶ Load model, encoder, scaler
         │
         ├──▶ eeg_processing.load_and_segment_csv()
         │         │
         │         ▼
         │    Segment test file
         │
         ├──▶ For each segment:
         │    • Normalize with scaler
         │    • Predict with model
         │    • Get confidence score
         │
         ├──▶ Majority voting
         │
         └──▶ Return (success, reason, confidence)
               │
               ▼
         database.log_authentication()


┌─────────────────────────────────────────────────────────────────────────────┐
│                        🎯 MINIMAL WORKING SET                                │
└─────────────────────────────────────────────────────────────────────────────┘

    ESSENTIAL FILES (Must Keep):
    ✓ gui_app.py              ⭐ Main application
    ✓ backend.py              Core logic
    ✓ eeg_processing.py       Signal processing
    ✓ model_management.py     CNN model
    ✓ database.py             Database
    ✓ config.py               Configuration
    ✓ themes.py               UI themes
    ✓ main_window.ui          UI layout
    ✓ requirements.txt        Dependencies

    OPTIONAL (Recommended):
    ○ dashboard.py            Performance dashboard
    ○ signal_viewer.py        Signal visualization
    ○ frequency_analyzer.py   Frequency analysis
    ○ performance_analyzer.py ROC curves
    ○ model_comparison.py     Model comparison
    ○ settings.py             Settings panel

    DIRECTORIES:
    ✓ assets/                 Generated files
    ✓ data/Filtered_Data/     EEG data
    ○ logs/                   Application logs


┌─────────────────────────────────────────────────────────────────────────────┐
│                        📝 NOTES                                              │
└─────────────────────────────────────────────────────────────────────────────┘

    • All optional modules are gracefully handled (try/except)
    • Database is optional (uses JSON as fallback)
    • GUI works standalone without optional tools
    • Each module is loosely coupled for easy maintenance
    • Configuration centralized in config.py
    • Themes can be easily customized in themes.py

╔══════════════════════════════════════════════════════════════════════════════╗
║  For cleanup instructions, see: CLEANUP_GUIDE.md                             ║
║  For detailed reference, see: GUI_APP_REFERENCE.md                           ║
╚══════════════════════════════════════════════════════════════════════════════╝
